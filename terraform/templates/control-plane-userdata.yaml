#cloud-config
package_update: true
package_upgrade: true

packages:
  - curl
  - wget
  - git
  - vim
  - htop
  - net-tools
  - bridge-utils
  - iptables
  - conntrack
  - socat
  - ipvsadm

write_files:
  - path: /etc/hostname
    content: ${cluster_name}-cp-${node_index}
    permissions: '0644'
  - path: /etc/hosts
    content: |
      127.0.0.1 localhost
      127.0.1.1 ${cluster_name}-cp-${node_index}
    permissions: '0644'
  - path: /etc/modules-load.d/k8s.conf
    content: |
      br_netfilter
      overlay
    permissions: '0644'
  - path: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
      vm.swappiness                       = 0
    permissions: '0644'

runcmd:
  # Update system
  - apt-get update && apt-get upgrade -y
  
  # Install Docker
  - curl -fsSL https://get.docker.com -o get-docker.sh
  - sh get-docker.sh
  - systemctl enable docker
  - systemctl start docker
  
  # Install kubeadm, kubelet, kubectl
  - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
  - apt-get update
  - apt-get install -y kubelet kubeadm kubectl
  - apt-mark hold kubelet kubeadm kubectl
  
  # Configure Docker for Kubernetes
  - mkdir -p /etc/docker
  - echo '{"exec-opts": ["native.cgroupdriver=systemd"]}' > /etc/docker/daemon.json
  - systemctl restart docker
  
  # Load kernel modules
  - modprobe br_netfilter
  - modprobe overlay
  
  # Apply sysctl settings
  - sysctl --system
  
  # Mount additional volume
  - mkfs.ext4 /dev/sdb
  - mkdir -p /mnt/data
  - mount /dev/sdb /mnt/data
  - echo '/dev/sdb /mnt/data ext4 defaults 0 0' >> /etc/fstab
  
  # Create directories for Kubernetes
  - mkdir -p /etc/kubernetes/manifests
  - mkdir -p /var/lib/kubelet
  - mkdir -p /var/lib/etcd
  
  # Set hostname
  - hostnamectl set-hostname ${cluster_name}-cp-${node_index}
  
  # Create acceldata user with SSH key
  - useradd -m -s /bin/bash acceldata
  - mkdir -p /home/acceldata/.ssh
  - echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC... acceldata@hetzner-dc' > /home/acceldata/.ssh/authorized_keys
  - chown -R acceldata:acceldata /home/acceldata/.ssh
  - chmod 700 /home/acceldata/.ssh
  - chmod 600 /home/acceldata/.ssh/authorized_keys
  - usermod -aG docker acceldata
  - usermod -aG sudo acceldata
  
  # Enable kubelet
  - systemctl enable kubelet

final_message: "Control plane node ${cluster_name}-cp-${node_index} is ready for Kubernetes cluster setup"