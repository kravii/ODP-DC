apiVersion: v1
kind: Namespace
metadata:
  name: local-path-storage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: local-path-provisioner-role
rules:
- apiGroups: [""]
  resources: ["nodes", "persistentvolumes"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete", "patch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "update", "patch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: local-path-provisioner-bind
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: local-path-provisioner
  namespace: local-path-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-path-provisioner
  template:
    metadata:
      labels:
        app: local-path-provisioner
    spec:
      serviceAccountName: local-path-provisioner-service-account
      containers:
      - name: local-path-provisioner
        image: rancher/local-path-provisioner:v0.0.24
        imagePullPolicy: IfNotPresent
        command:
        - local-path-provisioner
        - start
        - --config
        - /etc/config/config.json
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config/
        - name: storage-path
          mountPath: /opt/local-path-provisioner
        - name: shared-storage
          mountPath: /shared-storage
      volumes:
      - name: config-volume
        configMap:
          name: local-path-config
      - name: storage-path
        hostPath:
          path: /opt/local-path-provisioner
      - name: shared-storage
        hostPath:
          path: /
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-path-config
  namespace: local-path-storage
data:
  config.json: |
    {
      "nodePathMap":[
      {
        "node": "DEFAULT_PATH_FOR_NON_LISTED_NODES",
        "paths": ["/shared-storage/k8s-pv"]
      }
      ]
    }
  setup: |
    #!/bin/sh
    while getopts "m:s:p:" opt
    do
        case $opt in
            p)
                absolutePath=$OPTARG
                ;;
            s)
                sizeInBytes=$OPTARG
                ;;
            m)
                volMode=$OPTARG
                ;;
        esac
    done
    
    if [ -z "$absolutePath" ]; then
        echo "No absolute path"
        exit 1
    fi
    
    mkdir -p "$absolutePath"
    if [ $? -ne 0 ]; then
        echo "Failed to create $absolutePath"
        exit 1
    fi
    
    chmod 0777 "$absolutePath"
    if [ $? -ne 0 ]; then
        echo "Failed to chmod $absolutePath"
        exit 1
    fi
    
    echo "$absolutePath"
  teardown: |
    #!/bin/sh
    while getopts "m:s:p:" opt
    do
        case $opt in
            p)
                absolutePath=$OPTARG
                ;;
            s)
                sizeInBytes=$OPTARG
                ;;
            m)
                volMode=$OPTARG
                ;;
        esac
    done
    
    if [ -z "$absolutePath" ]; then
        echo "No absolute path"
        exit 1
    fi
    
    rm -rf "$absolutePath"
    if [ $? -ne 0 ]; then
        echo "Failed to remove $absolutePath"
        exit 1
    fi
    
    echo "$absolutePath"
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-path
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: rancher.io/local-path
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
allowedTopologies:
- matchLabelExpressions:
  - key: kubernetes.io/hostname
    values: ["*"]
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: local-path-pvc
  namespace: local-path-storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 100Gi